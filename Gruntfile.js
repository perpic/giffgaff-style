'use strict';

module.exports = function(grunt) {

    // Project configuration.
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
        banner: '/*!\n' +
                ' * giffgaff styleguide v<%= pkg.version %> by @perpic\n' +
                ' * Copyright <%= grunt.template.today("yyyy") %> <%= pkg.author %>\n' +
                ' */\n\n',

        //Remove folders anf files generated by build task
        clean: {
            src: [
                'src/css',
                'src/less/sprites',
                'src/images/sprites',
            ],
            build: [
                'build',
                'dist'
            ]
        },

        compress: {
            main: {
                options: {
                    archive: 'dist/styleguide.tar.gz',
                    mode: 'tar'
                },
                expand: true,
                cwd: 'build/',
                src: ['**/*'],
                dest: 'styleguide/'
            }
        },

        watch: {
            less: {
                files: ['src/less/*.less'],
                tasks: ['recess:css']
            }
        },

        jshint: {
            options: {
                jshintrc: '.jshintrc'
            },
            all: [
                'Gruntfile.js',
                'src/js/{,*/}*.js'
            ]
        },

        uglify: {
            vendor: {
                options: {
                    mangle: false
                },
                files: {
                    'build/js/vendor.min.js': [
                        'src/bower_components/jquery/jquery.js',
                        'src/bower_components/bootstrap/js/alert.js',
                        'src/bower_components/bootstrap/js/modal.js',
                        'src/bower_components/bootstrap/js/tab.js'
                    ]
                }
            },
            giffgaff: {
                options: {
                    banner: '/*! <%= pkg.name %> <%= grunt.template.today("yyyy-mm-dd") %> */\n'
                },
                files: {
                    'build/js/giffgaff.min.js': [
                        'src/js/giffgaff.js'
                    ]
                }
            }
        },
        
        recess: {
            options: {
                compile: true,
                banner: '<%= banner %>'
            },
            css: {
                src: ['src/less/giffgaff.less'],
                dest: 'src/css/giffgaff.css'
            },
            min: {
                options: {
                    compress: true
                },
                src: ['src/less/giffgaff.less'],
                dest: 'build/css/giffgaff.min.css'
            }
        },

        glue: {
            icons: {
                src: 'assets/icons/*',
                options: '--css=src/less/sprites --img=src/images/sprites --less --url=../images/sprites/ --namespace=icon --margin=10 --optipng'
            }
        },

        // Copy files not handled in other tasks here
        copy: {
            src: {
                files: [{
                    expand: true,
                    cwd: 'src/',
                    src: [
                        'images/**'
                    ],
                    dest: 'build/'
                }]
            }
        },
    });

    // These plugins provide necessary tasks.
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-contrib-jshint');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-watch');
    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-contrib-compress');
    grunt.loadNpmTasks('grunt-recess');
    grunt.loadNpmTasks('grunt-glue');

    // CSS distribution task.
    grunt.registerTask('build-css', [
        'glue',
        'recess'
    ]);

    grunt.registerTask('build', [
        'clean',
        'build-css',
        'uglify',
        'copy:src',
        'compress'
    ]);

    // Default task(s).
    grunt.registerTask('default', [
        'jshint',
        'build'
    ]);
};